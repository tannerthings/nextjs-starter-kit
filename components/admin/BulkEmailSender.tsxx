// components/admin/BulkEmailSender.tsx
'use client';

import { useState } from 'react';
import { useMutation, useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { AlertCircle, CheckCircle2 } from 'lucide-react';

interface BulkEmailSenderProps {
  eventId: string;
}

export default function BulkEmailSender({ eventId }: BulkEmailSenderProps) {
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');
  const [selectedTicketType, setSelectedTicketType] = useState<string | null>(null);
  const [ctaText, setCtaText] = useState<string>('');
  const [ctaUrl, setCtaUrl] = useState<string>('');
  const [isSending, setIsSending] = useState(false);
  const [result, setResult] = useState<any>(null);
  
  // Get ticket types for this event
  const ticketTypes = useQuery(api.ticketTypes.getTicketTypesByEvent, { eventId }) || [];
  
  // Get attendee count for preview
  const attendeeCount = useQuery(
    api.attendees.getAttendeeCount, 
    { 
      eventId, 
      ticketTypeId: selectedTicketType || undefined 
    }
  ) || 0;
  
  // Mutation for sending emails
  const sendBulkEmail = useMutation(api.email.sendBulkEmail);
  
  // Handle email sending
  const handleSendEmail = async () => {
    if (!subject || !message) {
      return;
    }
    
    setIsSending(true);
    setResult(null);
    
    try {
      const result = await sendBulkEmail({
        eventId,
        ticketTypeId: selectedTicketType || undefined,
        subject,
        message,
        ctaText: ctaText || undefined,
        ctaUrl: ctaUrl || undefined,
      });
      
      setResult(result);
    } catch (error: any) {
      setResult({ 
        success: false, 
        error: error.message || 'An error occurred while sending emails'
      });
    } finally {
      setIsSending(false);
    }
  };
  
  return (
    <div className="space-y-6 max-w-3xl mx-auto bg-white p-6 rounded-lg shadow">
      <h2 className="text-xl font-bold">Send Email to Attendees</h2>
      
      <div className="bg-blue-50 p-4 rounded-lg">
        <h3 className="font-medium">Email Preview</h3>
        <p>
          This email will be sent to {attendeeCount} attendees
          {selectedTicketType ? 
            ` with ticket type: ${ticketTypes.find(t => t._id === selectedTicketType)?.name}` : 
            ' across all ticket types'}
        </p>
      </div>
      
      {result && (
        <Alert variant={result.success ? "default" : "destructive"}>
          {result.success ? (
            <CheckCircle2 className="h-4 w-4" />
          ) : (
            <AlertCircle className="h-4 w-4" />
          )}
          <AlertTitle>
            {result.success ? 'Email sent successfully' : 'Failed to send emails'}
          </AlertTitle>
          <AlertDescription>
            {result.success ? (
              <>Sent to {result.sent} of {result.total} attendees.</>
            ) : (
              result.error
            )}
          </AlertDescription>
        </Alert>
      )}
      
      <div className="space-y-4">
        <div>
          <label className="text-sm font-medium">Ticket Type Filter</label>
          <Select
            value={selectedTicketType || ''}
            onValueChange={setSelectedTicketType}
          >
            <SelectTrigger>
              <SelectValue placeholder="All Ticket Types" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="">All Ticket Types</SelectItem>
              {ticketTypes.map((type: any) => (
                <SelectItem key={type._id} value={type._id}>
                  {type.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        
        <div>
          <label className="text-sm font-medium">Subject</label>
          <Input
            value={subject}
            onChange={e => setSubject(e.target.value)}
            placeholder="Email subject"
            className="w-full"
          />
        </div>
        
        <div>
          <label className="text-sm font-medium">Message</label>
          <Textarea
            value={message}
            onChange={e => setMessage(e.target.value)}
            placeholder="Enter your message to attendees"
            className="min-h-[200px] w-full"
          />
          <p className="text-sm text-gray-500 mt-1">
            You can use variables like {'{{firstName}}'} and {'{{lastName}}'} in your message.
          </p>
        </div>
        
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="text-sm font-medium">Call-to-Action Text (Optional)</label>
            <Input
              value={ctaText}
              onChange={e => setCtaText(e.target.value)}
              placeholder="e.g., View Event Details"
              className="w-full"
            />
          </div>
          
          <div>
            <label className="text-sm font-medium">Call-to-Action URL (Optional)</label>
            <Input
              value={ctaUrl}
              onChange={e => setCtaUrl(e.target.value)}
              placeholder="https://..."
              className="w-full"
            />
          </div>
        </div>
      </div>
      
      <div className="flex justify-end">
        <Button 
          onClick={handleSendEmail}
          disabled={isSending || !subject || !message}
        >
          {isSending ? 'Sending...' : 'Send Email'}
        </Button>
      </div>
    </div>
  );
}